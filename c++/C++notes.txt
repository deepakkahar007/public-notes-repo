#include<iostream>  //preprocessor for c++ header file
int main()
{
using namespace std;    // defing the standard library which will be used    
cout << "hello"<<endl;
int a{10}, b=20;   //define variable
int c =a+b;
cout <<"added value\n"<<c<<endl;
return 0;
}

functions in c++ :-
the function must be define before main function or it will throw a error that "function was not declared in this scope".
for eg:-
int add(int num1, int num2){
int num3=num1+num2;
return num3;
}
int main(){
    int a= add(25,25);
    cout << "added value is =" << a<< endl;
    cout << "added value is ="<<add(25,25)<<endl;   //another way to call function
}

stream manipulater:-
cout    =( this is used to print something in terminal)    
cin     =( this is use to take input from terminal)   
cerr    =(this is use to print error)
clog    =( this is use for log the output)

to take input with spaces in string use getline() 
getline(cin,fullname);  //to use this function make sure add #include<string>

signed and unsigned variable:-
the signed variable can store positive and negative value, but the unsigned variable only store positive value.
signed a{300};
signed b{-300};

unsigned variable
unsigned a{200};
unsigned b{-200};   //it will throw a compile time error

boolean variable store either ture or false it will contain 1 byte in memory.
we can change their value using boolaplha for eg:-
cout << boolalpha;

type casting in c++ :-
char a='a';
to type cast use 
cout << " "<< static_cast<int>(a) <<endl;

auto keyword:-
this keyword is use to let compiler decide what kind of data type it is, it will automatically detect the value and assign the data type :-     
auto a{20};
auto b{'e'};
auto c{10.5};

pointers:- the pointer are the variable which store the address of another variable with same data type.
int a{10};
int *a1{nullptr};   //the nullptr is use to store zero in pointer variables.
a1=&a;
to access the address use :-
cout << " "<< a1 <<endl;
to access the valueusing pointer variable:-
cout << " "<< *a1 <<endl;

you can change the value of variable using pointer :-
char *str='d';   int *str=34;

you can use char type array to store value and point it to first value of an array using:-
const char *str{"hello"};   //but this is a const variable and its value can not be change in entire programe.

to change the value of array using pointer use:-
char a[] {"hello"};
char[0]='a';
cout << " "<< a<<endl;

dynamic memory allocation in heap :-
the dynamic allocation is use to assign the memory to the programe in heap and stack. to allocate memory use new keyword with needed data type:-
int *p {nullptr};
p=new int ();
p=35;
cout <<" value of p is : "<<p<<endl; 
delete p;   to release memory use delete keyword.

we can use single pointer multiple times using reset the pointer:-
to reset the pointer use after the delete option:-
delete p;
p=nullptr;

dangling pointers:- it occurs when the pointer is :-
1. uninitalized pointer
2. deleted pointer 
3. multiple pointer pointing to same memory.

referncing in c++ :-
you can store refernce of a variable in another same data type variabls.
int a{50};  //original variable
int &b{a};  //refernced variable

cout << " " <<a<<endl;  //access the data value
cout << " " <<&b<<endl; //access the refernce value
cout << " " <<b<<endl; //access the value of original data type and modify its value.

a=100;  //changing the value using refernce variable

to create const variable use :-
int a{50};    // its value can be change
const int &b{a};    //this is a const refernce variable its value can not be change.

difference between pointer and refernce :-
1. the refernce must be initilized and declare. but the pointer contains garbage value in initilizing.
2. in refernce, don't have to use derefrencing operator to change value, but in pointer need to use derefrencing operator to change the data value.

the one defination rule:-
the one defination rule is that define once in programe and use multiple times. and the defination will be once not in multiple file or one in file.

how to use function of another programe :-
import the function file use #include"file name"
and use the function of another programe.

lambda functions in c++ :-
a mechanism to set up annonymous function(without name). once we have them set up, we can eiher give them names and call them or we just call them directly. lambda function syntax :-
define a variable =[capture list](parameters)-> return type{
    cout<<"hello world"<<endl;  //body of function
};  eg:-
auto func=[](){ //function defination
    cout<<"hello world"<<endl;
}
func(); //function call

//lambda function with name:-
 auto func=[](){
     cout<<" hello world"<<endl;
 };
 func();

//annonymous lambda function with no name:-
 [](){
     cout<<"hello world"<<endl;
}();
cout<<"done"<<endl;
(the annonymous lambda function always run without calling by the compiler)

//lambda function with parameters
[](int a,int b){
    cout<<"a+b: "<<a+b<<endl;
 }(45,5);   //giving the values to lambda function

 if we want to call mabda function so many time then we need give lambda a name and use it many times :-
auto func=[](int a,int b){
    cout<<"a+b:- "<<a+b<<endl;
};
func(23,45);
func(34,56);

//lambda function with returning result using variable:-

auto result=[](auto a,auto b){
    return a+b;
};
auto a=result(56,4);

cout<<" "<<a<<endl;
cout<<" "<<result(60,49)<<endl;

//using lambda's own return type:-
auto func=[](auto a,auto b)->int{
return a+b;
};
cout<<" "<<func(25,25)<<endl;
cout<<" "<<sizeof(func(23,27))<<endl;

in lambda function the capture list is use to access the out of scope variable inside the lambda function using capture list.
//using capture list to access out of scope variable:-
int a{10},b{29};
auto func=[a,b]()->int{
return a+b;
};
int fun=func();
cout<<" "<<fun<<endl; 

the capture list not access the variable but only copy the variable and perform manipulation on the value of initilized.
int c{50};      //initilized value
auto func=[c](){    //copy of original value
    cout<<"the inner value "<<c<<endl;
};
for (size_t i = 0; i < 5; i++)  //incresing the value of original variable
{ cout<<"outer value "<<c<<endl;
    func();
    ++c; }
to work with outer value from inside the lambda function use the referncing:-
int c{50};
auto func=[&c](){   //adding referncing after that whats the value of outside is the value of inside
    cout<<"the inner value "<<c<<endl;
};
for (size_t i = 0; i < 5; i++)
{ cout<<"outer value "<<c<<endl;
    func();
    ++c; }

to access everything inside the lambda function use [=] for eg:-
int a{10},b{20};
auto func=[=](){
    cout<<" "<<a+b<<endl;
};
func();

using referncing [&]:-
int a{10},b{20};
auto func=[&](){
    cout<<" "<<a+b<<endl;
};
for (size_t i = 0; i < 5; i++)
{
    a++,b++;
    func();   
}

//template function in c++:-
templates are not functions they are just blueprint of function that compiler gone create using our arguments. they are not c++ code. the templates were not generated until the function calls.

syntax of templates:-
template <typename T>
T maxi(T a, T b){
    return (a>b) ? a : b ;
}

int main(){
int c = maxi(23,34);
char d{'a','b'};
string result{"hello","why me here"};
cout<<" " << c << endl;
cout<<" " << d << endl;
cout<<" " << result << endl;
return 0;
}

//templates using pointer:-
be carefull when you use pointer with template because its gone perform task on addresses not the value for eg:-

template <typename T>
T maxi(T a, T b) {
    return (a > b) ? a : b; }
int main() {
    int a{50},b{60};
    int *pt1{&a},*pt2{&b};
    cout<<" "<<maxi(a,b)<<endl;
    cout<<" "<<&pt1<<endl;
    cout<<" "<<&pt2<<endl;
    cout<<" "<<*maxi(pt1,pt2)<<endl;
return 0; }

ternary expression:-
return (condition) ? true : false; for eg:- return(a>b)a:b;





















































